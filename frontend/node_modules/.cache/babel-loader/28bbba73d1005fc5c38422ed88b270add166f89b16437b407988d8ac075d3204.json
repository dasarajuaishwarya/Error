{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aishw\\\\OneDrive\\\\Desktop\\\\641 SAD\\\\expense-tracker_fullstack-master 5\\\\expense-tracker_fullstack-master\\\\frontend\\\\src\\\\context\\\\globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useContext, useState } from \"react\";\n// import axios from \"axios\";\n\n// const BASE_URL = \"http://localhost:4000/api/v1\";\n\n// const GlobalContext = React.createContext();\n\n// export const GlobalProvider = ({ children }) => {\n//   const [incomes, setIncomes] = useState([]);\n//   const [expenses, setExpenses] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   // Helper function to get token from localStorage\n//   const getAuthHeaders = () => {\n//     const token = localStorage.getItem(\"token\");\n//     return {\n//       headers: {\n//         Authorization: `Bearer ${token}`, // Include token in headers\n//         \"Content-Type\": \"application/json\", // Ensure proper content type\n//       },\n//     };\n//   };\n\n//   // Add Income\n//   const addIncome = async (income) => {\n//     try {\n//       const response = await axios.post(\n//         `${BASE_URL}/add-income`,\n//         income,\n//         getAuthHeaders()\n//       );\n//       setError(null); // Clear previous errors\n//       getIncomes(); // Refresh incomes after adding\n//       return response.data; // Optionally return response data\n//     } catch (err) {\n//       console.error(\"Error adding income:\", err);\n//       setError(err.response?.data?.message || \"Error adding income\");\n//     }\n//   };\n\n//   // Get Incomes\n//   const getIncomes = async () => {\n//     try {\n//       const response = await axios.get(\n//         `${BASE_URL}/get-incomes`,\n//         getAuthHeaders()\n//       );\n//       setIncomes(response.data); // Set retrieved incomes\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error fetching incomes:\", err);\n//       setError(err.response?.data?.message || \"Error fetching incomes\");\n//     }\n//   };\n\n//   // Delete Income\n//   const deleteIncome = async (id) => {\n//     try {\n//       await axios.delete(`${BASE_URL}/delete-income/${id}`, getAuthHeaders());\n//       getIncomes(); // Refresh incomes after deletion\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error deleting income:\", err);\n//       setError(err.response?.data?.message || \"Error deleting income\");\n//     }\n//   };\n\n//   // Calculate Total Income\n//   const totalIncome = () => {\n//     return incomes.reduce((acc, income) => acc + income.amount, 0);\n//   };\n\n//   // Add Expense\n//   const addExpense = async (expense) => {\n//     try {\n//       const response = await axios.post(\n//         `${BASE_URL}/add-expense`,\n//         expense,\n//         getAuthHeaders()\n//       );\n//       setError(null); // Clear previous errors\n//       getExpenses(); // Refresh expenses after adding\n//       return response.data; // Optionally return response data\n//     } catch (err) {\n//       console.error(\"Error adding expense:\", err);\n//       setError(err.response?.data?.message || \"Error adding expense\");\n//     }\n//   };\n\n//   // Get Expenses\n//   const getExpenses = async () => {\n//     try {\n//       const response = await axios.get(\n//         `${BASE_URL}/get-expenses`,\n//         getAuthHeaders()\n//       );\n//       setExpenses(response.data); // Set retrieved expenses\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error fetching expenses:\", err);\n//       setError(err.response?.data?.message || \"Error fetching expenses\");\n//     }\n//   };\n\n//   // Delete Expense\n//   const deleteExpense = async (id) => {\n//     try {\n//       await axios.delete(`${BASE_URL}/delete-expense/${id}`, getAuthHeaders());\n//       getExpenses(); // Refresh expenses after deletion\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error deleting expense:\", err);\n//       setError(err.response?.data?.message || \"Error deleting expense\");\n//     }\n//   };\n\n//   // Calculate Total Expenses\n//   const totalExpenses = () => {\n//     return expenses.reduce((acc, expense) => acc + expense.amount, 0);\n//   };\n\n//   // Calculate Total Balance\n//   const totalBalance = () => {\n//     return totalIncome() - totalExpenses();\n//   };\n\n//   // Get Transaction History (latest 3 items)\n// //   const transactionHistory = () => {\n// //     const incomesWithType = incomes.map((income) => ({\n// //       ...income,\n// //       type: \"income\",\n// //     }));\n// //     const expensesWithType = expenses.map((expense) => ({\n// //       ...expense,\n// //       type: \"expense\",\n// //     }));\n\n// //     // Combine and sort by date\n// //     const history = [...incomesWithType, ...expensesWithType].sort(\n// //       (a, b) =>\n// //         new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)\n// //     );\n\n// //     // Return top 3 most recent transactions\n// //     return history.slice(0, 3);\n// //   };\n// const transactionHistory = () => {\n//     const incomesWithType = incomes.map((income) => ({\n//         ...income,\n//         type: \"income\", // Explicitly set the type\n//     }));\n\n//     const expensesWithType = expenses.map((expense) => ({\n//         ...expense,\n//         type: \"expense\", // Explicitly set the type\n//     }));\n\n//     // Combine and sort by date\n//     const history = [...incomesWithType, ...expensesWithType].sort(\n//         (a, b) =>\n//             new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)\n//     );\n\n//     return history; // Return the combined and sorted array\n// };\n\n// const getFilteredTransactions = async (startDate, endDate) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/transactions`, {\n//             params: { startDate, endDate },\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem('token')}`,\n//             },\n//         });\n\n//         // Add type explicitly based on your backend data structure\n//         const transactionsWithType = response.data.map((transaction) => ({\n//             ...transaction,\n//             type: transaction.type || (transaction.isIncome ? \"income\" : \"expense\"), // Adjust if your backend uses different field names\n//         }));\n\n//         console.log('Filtered Transactions:', transactionsWithType);\n//         return transactionsWithType;\n//     } catch (err) {\n//         console.error('Error fetching filtered transactions:', err);\n//     }\n// };\n\n//   return (\n//     <GlobalContext.Provider\n//       value={{\n//         addIncome,\n//         getIncomes,\n//         incomes,\n//         deleteIncome,\n//         expenses,\n//         totalIncome,\n//         addExpense,\n//         getExpenses,\n//         deleteExpense,\n//         totalExpenses,\n//         totalBalance,\n//         transactionHistory,\n//         getFilteredTransactions,\n//         error,\n//         setError,\n//       }}\n//     >\n//       {children}\n//     </GlobalContext.Provider>\n//   );\n// };\n\n// export const useGlobalContext = () => {\n//   return useContext(GlobalContext);\n// };\n\nimport React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:4000/api/v1\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Helper function to get token from localStorage\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n  };\n\n  // Update Profile function\n  // const updateProfile = async (name, password) => {\n  //   try {\n  //     const token = localStorage.getItem(\"token\");\n  //     const response = await axios.put(\n  //       `${BASE_URL}/profile`,  // The correct endpoint\n  //       { name, password },\n  //       {\n  //         headers: {\n  //           Authorization: `Bearer ${token}`,\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //       }\n  //     );\n  //     localStorage.setItem(\"name\", name);  // Update name in localStorage\n  //     setError(null); // Clear previous errors\n  //     return response.data;\n  //   } catch (error) {\n  //     console.error(\"Error updating profile:\", error);\n  //     setError(error.response?.data?.message || \"Error updating profile\");\n  //     throw error; // Rethrow error to be caught in the Profile component\n  //   }\n  // };\n\n  // Add Income\n  const addIncome = async income => {\n    try {\n      const response = await axios.post(`${BASE_URL}/add-income`, income, getAuthHeaders());\n      setError(null); // Clear previous errors\n      getIncomes(); // Refresh incomes after adding\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error adding income:\", err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Error adding income\");\n    }\n  };\n\n  // Get Incomes\n  const getIncomes = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/get-incomes`, getAuthHeaders());\n      setIncomes(response.data); // Set retrieved incomes\n      setError(null); // Clear previous errors\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Error fetching incomes:\", err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Error fetching incomes\");\n    }\n  };\n\n  // Delete Income\n  const deleteIncome = async id => {\n    try {\n      await axios.delete(`${BASE_URL}/delete-income/${id}`, getAuthHeaders());\n      getIncomes(); // Refresh incomes after deletion\n      setError(null); // Clear previous errors\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(\"Error deleting income:\", err);\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || \"Error deleting income\");\n    }\n  };\n\n  // Calculate Total Income\n  const totalIncome = () => {\n    return incomes.reduce((acc, income) => acc + income.amount, 0);\n  };\n\n  // Add Expense\n  const addExpense = async expense => {\n    try {\n      const response = await axios.post(`${BASE_URL}/add-expense`, expense, getAuthHeaders());\n      setError(null); // Clear previous errors\n      getExpenses(); // Refresh expenses after adding\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      console.error(\"Error adding expense:\", err);\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || \"Error adding expense\");\n    }\n  };\n\n  // Get Expenses\n  const getExpenses = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/get-expenses`, getAuthHeaders());\n      setExpenses(response.data); // Set retrieved expenses\n      setError(null); // Clear previous errors\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      console.error(\"Error fetching expenses:\", err);\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || \"Error fetching expenses\");\n    }\n  };\n\n  // Delete Expense\n  const deleteExpense = async id => {\n    try {\n      await axios.delete(`${BASE_URL}/delete-expense/${id}`, getAuthHeaders());\n      getExpenses(); // Refresh expenses after deletion\n      setError(null); // Clear previous errors\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      console.error(\"Error deleting expense:\", err);\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || \"Error deleting expense\");\n    }\n  };\n\n  // Calculate Total Expenses\n  const totalExpenses = () => {\n    return expenses.reduce((acc, expense) => acc + expense.amount, 0);\n  };\n\n  // Calculate Total Balance\n  const totalBalance = () => {\n    return totalIncome() - totalExpenses();\n  };\n\n  // Get Transaction History (latest 3 items)\n  const transactionHistory = () => {\n    const incomesWithType = incomes.map(income => ({\n      ...income,\n      type: \"income\" // Explicitly set the type\n    }));\n    const expensesWithType = expenses.map(expense => ({\n      ...expense,\n      type: \"expense\" // Explicitly set the type\n    }));\n\n    // Combine and sort by date\n    const history = [...incomesWithType, ...expensesWithType].sort((a, b) => new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date));\n    return history; // Return the combined and sorted array\n  };\n\n  // Get filtered transactions based on date range\n  const getFilteredTransactions = async (startDate, endDate) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/transactions`, {\n        params: {\n          startDate,\n          endDate\n        },\n        headers: getAuthHeaders().headers\n      });\n\n      // Add type explicitly based on your backend data structure\n      const transactionsWithType = response.data.map(transaction => ({\n        ...transaction,\n        type: transaction.type || (transaction.isIncome ? \"income\" : \"expense\") // Adjust if your backend uses different field names\n      }));\n      console.log(\"Filtered Transactions:\", transactionsWithType);\n      return transactionsWithType;\n    } catch (err) {\n      console.error(\"Error fetching filtered transactions:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      getFilteredTransactions,\n      // Provide it in context\n      // updateProfile, // Provide updateProfile in context\n      addIncome,\n      getIncomes,\n      incomes,\n      deleteIncome,\n      expenses,\n      totalIncome,\n      addExpense,\n      getExpenses,\n      deleteExpense,\n      totalExpenses,\n      totalBalance,\n      transactionHistory,\n      error,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","axios","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","_ref","_s","children","incomes","setIncomes","expenses","setExpenses","error","setError","getAuthHeaders","token","localStorage","getItem","headers","Authorization","addIncome","income","response","post","getIncomes","data","err","_err$response","_err$response$data","console","message","get","_err$response2","_err$response2$data","deleteIncome","id","delete","_err$response3","_err$response3$data","totalIncome","reduce","acc","amount","addExpense","expense","getExpenses","_err$response4","_err$response4$data","_err$response5","_err$response5$data","deleteExpense","_err$response6","_err$response6$data","totalExpenses","totalBalance","transactionHistory","incomesWithType","map","type","expensesWithType","history","sort","a","b","Date","createdAt","date","getFilteredTransactions","startDate","endDate","params","transactionsWithType","transaction","isIncome","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["C:/Users/aishw/OneDrive/Desktop/641 SAD/expense-tracker_fullstack-master 5/expense-tracker_fullstack-master/frontend/src/context/globalContext.js"],"sourcesContent":["// import React, { useContext, useState } from \"react\";\n// import axios from \"axios\";\n\n// const BASE_URL = \"http://localhost:4000/api/v1\";\n\n// const GlobalContext = React.createContext();\n\n// export const GlobalProvider = ({ children }) => {\n//   const [incomes, setIncomes] = useState([]);\n//   const [expenses, setExpenses] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   // Helper function to get token from localStorage\n//   const getAuthHeaders = () => {\n//     const token = localStorage.getItem(\"token\");\n//     return {\n//       headers: {\n//         Authorization: `Bearer ${token}`, // Include token in headers\n//         \"Content-Type\": \"application/json\", // Ensure proper content type\n//       },\n//     };\n//   };\n\n//   // Add Income\n//   const addIncome = async (income) => {\n//     try {\n//       const response = await axios.post(\n//         `${BASE_URL}/add-income`,\n//         income,\n//         getAuthHeaders()\n//       );\n//       setError(null); // Clear previous errors\n//       getIncomes(); // Refresh incomes after adding\n//       return response.data; // Optionally return response data\n//     } catch (err) {\n//       console.error(\"Error adding income:\", err);\n//       setError(err.response?.data?.message || \"Error adding income\");\n//     }\n//   };\n\n//   // Get Incomes\n//   const getIncomes = async () => {\n//     try {\n//       const response = await axios.get(\n//         `${BASE_URL}/get-incomes`,\n//         getAuthHeaders()\n//       );\n//       setIncomes(response.data); // Set retrieved incomes\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error fetching incomes:\", err);\n//       setError(err.response?.data?.message || \"Error fetching incomes\");\n//     }\n//   };\n\n//   // Delete Income\n//   const deleteIncome = async (id) => {\n//     try {\n//       await axios.delete(`${BASE_URL}/delete-income/${id}`, getAuthHeaders());\n//       getIncomes(); // Refresh incomes after deletion\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error deleting income:\", err);\n//       setError(err.response?.data?.message || \"Error deleting income\");\n//     }\n//   };\n\n//   // Calculate Total Income\n//   const totalIncome = () => {\n//     return incomes.reduce((acc, income) => acc + income.amount, 0);\n//   };\n\n//   // Add Expense\n//   const addExpense = async (expense) => {\n//     try {\n//       const response = await axios.post(\n//         `${BASE_URL}/add-expense`,\n//         expense,\n//         getAuthHeaders()\n//       );\n//       setError(null); // Clear previous errors\n//       getExpenses(); // Refresh expenses after adding\n//       return response.data; // Optionally return response data\n//     } catch (err) {\n//       console.error(\"Error adding expense:\", err);\n//       setError(err.response?.data?.message || \"Error adding expense\");\n//     }\n//   };\n\n//   // Get Expenses\n//   const getExpenses = async () => {\n//     try {\n//       const response = await axios.get(\n//         `${BASE_URL}/get-expenses`,\n//         getAuthHeaders()\n//       );\n//       setExpenses(response.data); // Set retrieved expenses\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error fetching expenses:\", err);\n//       setError(err.response?.data?.message || \"Error fetching expenses\");\n//     }\n//   };\n\n//   // Delete Expense\n//   const deleteExpense = async (id) => {\n//     try {\n//       await axios.delete(`${BASE_URL}/delete-expense/${id}`, getAuthHeaders());\n//       getExpenses(); // Refresh expenses after deletion\n//       setError(null); // Clear previous errors\n//     } catch (err) {\n//       console.error(\"Error deleting expense:\", err);\n//       setError(err.response?.data?.message || \"Error deleting expense\");\n//     }\n//   };\n\n//   // Calculate Total Expenses\n//   const totalExpenses = () => {\n//     return expenses.reduce((acc, expense) => acc + expense.amount, 0);\n//   };\n\n//   // Calculate Total Balance\n//   const totalBalance = () => {\n//     return totalIncome() - totalExpenses();\n//   };\n\n//   // Get Transaction History (latest 3 items)\n// //   const transactionHistory = () => {\n// //     const incomesWithType = incomes.map((income) => ({\n// //       ...income,\n// //       type: \"income\",\n// //     }));\n// //     const expensesWithType = expenses.map((expense) => ({\n// //       ...expense,\n// //       type: \"expense\",\n// //     }));\n\n// //     // Combine and sort by date\n// //     const history = [...incomesWithType, ...expensesWithType].sort(\n// //       (a, b) =>\n// //         new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)\n// //     );\n\n// //     // Return top 3 most recent transactions\n// //     return history.slice(0, 3);\n// //   };\n// const transactionHistory = () => {\n//     const incomesWithType = incomes.map((income) => ({\n//         ...income,\n//         type: \"income\", // Explicitly set the type\n//     }));\n\n//     const expensesWithType = expenses.map((expense) => ({\n//         ...expense,\n//         type: \"expense\", // Explicitly set the type\n//     }));\n\n//     // Combine and sort by date\n//     const history = [...incomesWithType, ...expensesWithType].sort(\n//         (a, b) =>\n//             new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)\n//     );\n    \n//     return history; // Return the combined and sorted array\n// };\n\n\n\n\n// const getFilteredTransactions = async (startDate, endDate) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/transactions`, {\n//             params: { startDate, endDate },\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem('token')}`,\n//             },\n//         });\n\n//         // Add type explicitly based on your backend data structure\n//         const transactionsWithType = response.data.map((transaction) => ({\n//             ...transaction,\n//             type: transaction.type || (transaction.isIncome ? \"income\" : \"expense\"), // Adjust if your backend uses different field names\n//         }));\n\n//         console.log('Filtered Transactions:', transactionsWithType);\n//         return transactionsWithType;\n//     } catch (err) {\n//         console.error('Error fetching filtered transactions:', err);\n//     }\n// };\n\n\n//   return (\n//     <GlobalContext.Provider\n//       value={{\n//         addIncome,\n//         getIncomes,\n//         incomes,\n//         deleteIncome,\n//         expenses,\n//         totalIncome,\n//         addExpense,\n//         getExpenses,\n//         deleteExpense,\n//         totalExpenses,\n//         totalBalance,\n//         transactionHistory,\n//         getFilteredTransactions,\n//         error,\n//         setError,\n//       }}\n//     >\n//       {children}\n//     </GlobalContext.Provider>\n//   );\n// };\n\n// export const useGlobalContext = () => {\n//   return useContext(GlobalContext);\n// };\n\nimport React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\n\nconst BASE_URL = \"http://localhost:4000/api/v1\";\n\nconst GlobalContext = React.createContext();\n\nexport const GlobalProvider = ({ children }) => {\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Helper function to get token from localStorage\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n  };\n\n  // Update Profile function\n  // const updateProfile = async (name, password) => {\n  //   try {\n  //     const token = localStorage.getItem(\"token\");\n  //     const response = await axios.put(\n  //       `${BASE_URL}/profile`,  // The correct endpoint\n  //       { name, password },\n  //       {\n  //         headers: {\n  //           Authorization: `Bearer ${token}`,\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //       }\n  //     );\n  //     localStorage.setItem(\"name\", name);  // Update name in localStorage\n  //     setError(null); // Clear previous errors\n  //     return response.data;\n  //   } catch (error) {\n  //     console.error(\"Error updating profile:\", error);\n  //     setError(error.response?.data?.message || \"Error updating profile\");\n  //     throw error; // Rethrow error to be caught in the Profile component\n  //   }\n  // };\n\n  // Add Income\n  const addIncome = async (income) => {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/add-income`,\n        income,\n        getAuthHeaders()\n      );\n      setError(null); // Clear previous errors\n      getIncomes(); // Refresh incomes after adding\n      return response.data;\n    } catch (err) {\n      console.error(\"Error adding income:\", err);\n      setError(err.response?.data?.message || \"Error adding income\");\n    }\n  };\n\n  // Get Incomes\n  const getIncomes = async () => {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/get-incomes`,\n        getAuthHeaders()\n      );\n      setIncomes(response.data); // Set retrieved incomes\n      setError(null); // Clear previous errors\n    } catch (err) {\n      console.error(\"Error fetching incomes:\", err);\n      setError(err.response?.data?.message || \"Error fetching incomes\");\n    }\n  };\n\n  // Delete Income\n  const deleteIncome = async (id) => {\n    try {\n      await axios.delete(`${BASE_URL}/delete-income/${id}`, getAuthHeaders());\n      getIncomes(); // Refresh incomes after deletion\n      setError(null); // Clear previous errors\n    } catch (err) {\n      console.error(\"Error deleting income:\", err);\n      setError(err.response?.data?.message || \"Error deleting income\");\n    }\n  };\n\n  // Calculate Total Income\n  const totalIncome = () => {\n    return incomes.reduce((acc, income) => acc + income.amount, 0);\n  };\n\n  // Add Expense\n  const addExpense = async (expense) => {\n    try {\n      const response = await axios.post(\n        `${BASE_URL}/add-expense`,\n        expense,\n        getAuthHeaders()\n      );\n      setError(null); // Clear previous errors\n      getExpenses(); // Refresh expenses after adding\n      return response.data;\n    } catch (err) {\n      console.error(\"Error adding expense:\", err);\n      setError(err.response?.data?.message || \"Error adding expense\");\n    }\n  };\n\n  // Get Expenses\n  const getExpenses = async () => {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/get-expenses`,\n        getAuthHeaders()\n      );\n      setExpenses(response.data); // Set retrieved expenses\n      setError(null); // Clear previous errors\n    } catch (err) {\n      console.error(\"Error fetching expenses:\", err);\n      setError(err.response?.data?.message || \"Error fetching expenses\");\n    }\n  };\n\n  // Delete Expense\n  const deleteExpense = async (id) => {\n    try {\n      await axios.delete(`${BASE_URL}/delete-expense/${id}`, getAuthHeaders());\n      getExpenses(); // Refresh expenses after deletion\n      setError(null); // Clear previous errors\n    } catch (err) {\n      console.error(\"Error deleting expense:\", err);\n      setError(err.response?.data?.message || \"Error deleting expense\");\n    }\n  };\n\n  // Calculate Total Expenses\n  const totalExpenses = () => {\n    return expenses.reduce((acc, expense) => acc + expense.amount, 0);\n  };\n\n  // Calculate Total Balance\n  const totalBalance = () => {\n    return totalIncome() - totalExpenses();\n  };\n\n  // Get Transaction History (latest 3 items)\n  const transactionHistory = () => {\n    const incomesWithType = incomes.map((income) => ({\n      ...income,\n      type: \"income\", // Explicitly set the type\n    }));\n\n    const expensesWithType = expenses.map((expense) => ({\n      ...expense,\n      type: \"expense\", // Explicitly set the type\n    }));\n\n    // Combine and sort by date\n    const history = [...incomesWithType, ...expensesWithType].sort(\n      (a, b) =>\n        new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)\n    );\n\n    return history; // Return the combined and sorted array\n  };\n\n  // Get filtered transactions based on date range\n  const getFilteredTransactions = async (startDate, endDate) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/transactions`, {\n        params: { startDate, endDate },\n        headers: getAuthHeaders().headers,\n      });\n\n      // Add type explicitly based on your backend data structure\n      const transactionsWithType = response.data.map((transaction) => ({\n        ...transaction,\n        type: transaction.type || (transaction.isIncome ? \"income\" : \"expense\"), // Adjust if your backend uses different field names\n      }));\n\n      console.log(\"Filtered Transactions:\", transactionsWithType);\n      return transactionsWithType;\n    } catch (err) {\n      console.error(\"Error fetching filtered transactions:\", err);\n    }\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        getFilteredTransactions, // Provide it in context\n        // updateProfile, // Provide updateProfile in context\n        addIncome,\n        getIncomes,\n        incomes,\n        deleteIncome,\n        expenses,\n        totalIncome,\n        addExpense,\n        getExpenses,\n        deleteExpense,\n        totalExpenses,\n        totalBalance,\n        transactionHistory,\n        error,\n        setError,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport const useGlobalContext = () => {\n  return useContext(GlobalContext);\n};\n\n\n"],"mappings":";;;AAAA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAG,8BAA8B;AAE/C,MAAMC,aAAa,gBAAGP,KAAK,CAACQ,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMC,cAAc,GAAGC,IAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}